/*
 * dongA JavaScript Library v1.0
 * http://donga.com/
 *
 * Copyright 2015 Copyright by dongA.com All rights reserved.
 */

function PullDownRefresh() 
{
    "use strict";

    var iOSLimit = 90 ;
    var AndroidLimit = 90 ;
    var container = $(document); 
    var context =  $('body').children(0); 

    var reload = true;

    if ( navigator.userAgent.indexOf("Chrome") != -1 ) 
    {
        var caseCheck = false ;
        if ( navigator.userAgent.indexOf("Samsung") !== -1 ) caseCheck = true;
        if ( navigator.userAgent.indexOf("LG") !== -1 ) caseCheck = true;
        if ( navigator.userAgent.indexOf("IM") !== -1 ) caseCheck = true;
        reload = caseCheck ;
    }
    else if ( navigator.userAgent.indexOf("CriOS") != -1 ) reload = false;


    if ( reload ==  true )
    {
        var reloadObjStr = "<div id='fullScrollReload' style='width:100%;text-align:center;position:display:block;position:fixed;z-index:999999;top:-70px;margin:0;'><img src='https://image.donga.com/donga/img/loading5.gif'></div>" ;
        $('body').append ( reloadObjStr ) ;
    }

    if ( reload )
    {
        $(container).on({
            touchstart: function(event) {
                startHandle ( event );
            },
            touchmove: function(event) {
               moveHandle ( event );
            },
            touchend: function(event) {
               endHandle ( event );
            }
        });          
    }

    // iOS
    function scrollHandle()
    {
        if ( $(container).scrollTop() < -iOSLimit )
        {
            $('#fullScrollReload').show('slide', {direction: 'up'});
            setTimeout( function(){ location.reload(); }, 500 ) ;                 
        }
    }
    
    var start = {};
    var delta = { x: 0, y: 0, time: new Date };
    var trace = false ;
    
    // Android
    function startHandle ( event )
    {
        var touches = event.originalEvent.changedTouches[0] ;
        start = {
            x: touches.pageX,
            y: touches.pageY,
            time: +new Date
        };
        delta = { x: 0, y: 0, time: new Date };
            
        if ($(container).scrollTop() == 0 ) trace = true;
        else trace = false;
    }

    function moveHandle ( event )
    {
        if ( trace )
        {
            var touches = event.originalEvent.changedTouches[0] ;
            delta = {
                x: touches.pageX - start.x,
                y: touches.pageY - start.y,
                time: new Date - start.time
            };
    
            if ( delta.y > 0  )
            {
                event.preventDefault();
                
                if ( delta.y > AndroidLimit )
                {
                    trace = false ;
                    $( "#fullScrollReload" ).animate( {  top: "10" }, 300, function() {
                            location.reload();
                        } ) ;
                }   
            }
        }
    }
    function endHandle ( event )
    {    
        trace = false ;
    }
}

function FullScroll(options) 
{
    "use strict";

    var reload = false ;
    var start = {};
    var delta = {};
    var limit = 30 ;
    var margin = 100 ;
    
    var request = '' ;
    var target = '' ;
    
    var backgroundimage = '' ;
    var backgroundcolor = '#000' ;
    var fullscreen = false ;
    
    if ( options.reload ) reload = options.reload ;
    if ( options.request ) request = options.request ;
    if ( options.target ) target = options.target ;
    if ( options.backgroundimage ) backgroundimage =  options.backgroundimage ;
    if ( options.backgroundcolor ) backgroundcolor =  options.backgroundcolor ;
    if ( options.fullscreen ) fullscreen =  options.fullscreen ;

    var isRequest = false ;
    var isAndroidReload = false ;
    
    if ( navigator.userAgent.indexOf("Chrome") != -1 ) 
    {
        if ( navigator.userAgent.indexOf("SamsungBrowser") == -1 ) reload = false;
    }
    else if ( navigator.userAgent.indexOf("CriOS") != -1 ) reload = false;
    

    var context ;
    var container ;

    $('body').hide();

    if ( options.fullscreen )
    {
        $('html').css('height', '100%');
        
        $('body').css('width', '100%');
        $('body').css('height', '100%');
        $('body').css('position', 'fixed');
        $('body').css('margin', '!important');    
        $('body').css('padding', '!important');    
        $('body').css('background', backgroundcolor);        

        $('body').children(0).css('width', '100%');
        $('body').children(0).css('height', '100%');
        $('body').children(0).css('position', 'relative');
        $('body').children(0).css('overflow', 'hidden');
        $('body').children(0).css('overflow-y', 'auto');    
        $('body').children(0).css('-webkit-overflow-scrolling', 'touch');    
        $('body').children(0).css('margin', '!important');    
        $('body').children(0).css('padding', '!important');    
        $('body').children(0).css('background', backgroundcolor);
        $('body').children(0).css('top', 0);
        $('body').children(0).css('left', 0);

        container = $('body').children(0);
        context =  $('body').children(0).children(0);
    }
    else
    {
        container = $(document); 
        context =  $('body').children(0); 
    }

    if ( backgroundimage != '' ) 
    {
        if ( fullscreen )
        {
            $(container).css('background', backgroundcolor);
            $(container).css('background-image', 'url(' + options.backgroundimage + ')');
            $(container).css('background-size', '100% auto');
        }
        else
        {
            $(context).parent().css('background', backgroundcolor);
            $(context).append( "<div id='fullScrollBackground' style='width:100%;height:1500px;position:fixed;left:0;top:0;margin:0 !important;padding:0 !important;z-index:-1;display:block;background-image:url("+backgroundimage+");background:"+backgroundcolor+";background-size: 100% auto;background-position: 0 0;background-repeat: no-repeat;'></div>" ) ;
            $('#fullScrollBackground').css('background-image', 'url(' + backgroundimage + ')') ;
            $('#fullScrollBackground').css('background-size', '100% auto') ;

        }
    }

    if ( reload ==  true )
    {
        $('body').append( "<div id='fullScrollReload' style='width:100%;text-align:center;position:fixed;z-index:999;display:none;top:0;margin:10px;'><img src='https://image.donga.com/donga/img/loading5.gif'></div>" ) ;
    }
    if ( request != "" )
    {
        $('body').append( "<div id='fullScrollRequest' style='width:100%;text-align:center;position:fixed;z-index:999;display:none;bottom:0;margin:10px;'><img src='https://image.donga.com/donga/img/loading5.gif'></div>" ) ;
    }
    $('body').show();

    function animate(to, speed, end) 
    {
        if ( end == 1 )
        {
            $(container).animate ( { top: to}, speed,  'easeOutQuint' ) ;
        }
        else if ( end == 2 )
        {
            $(container).animate ( { top: to}, speed,  'easeOutBack' ) ;
        }
        else
        {
            if ( fullscreen ) $(container).animate ( { top: to}, speed ) ;
        }
    }

    if ( navigator.userAgent.indexOf("OS X") == -1 )
    {
        $(container).on({
            touchstart: function(event) {
                startHandle ( event );
            },
            touchmove: function(event) {
               moveHandle ( event );
            },
            touchend: function(event) {
                endHandle ( event );
            },
            scroll: function() {
                scrollHandle();
            }
        });
    }
    else
    {
        $(container).on({
            touchmove: function(event) {
                moveHandleIOS ( event );
            },
            scroll: function() {
                scrollHandle();
            }
        });
    }

    var checkAndroidReload = false;
    var initialAndroidMargin = false;
    var startAndroidValue = 0;

    function startHandle ( event )
    {
        var touches = event.originalEvent.changedTouches[0] ;
        // measure start values
        start = {
            // get initial touch coords
            x: touches.pageX,
            y: touches.pageY,
            // store time to determine touch duration
            time: +new Date
        };
        // reset delta and end measurements
        delta = {};
        
        if ( reload && fullscreen == false && $(container).scrollTop() == 0 )
        {
            checkAndroidReload = true;
            initialAndroidMargin = $(context).css('margin-top') ;
        }
    }

    function moveHandle ( event )
    {
        var touches = event.originalEvent.changedTouches[0] ;

        // measure change in x and y
        delta = {
            x: touches.pageX - start.x,
            y: touches.pageY - start.y,
            time: new Date - start.time
        }
        startAndroidValue += delta.y ;

        if ( checkAndroidReload && reload && delta.y > 5 ) 
        {
            if ( fullscreen )
            {
                animate( "+=" + delta.y, 0, 0 );
            }
            else
            {
                var to = "+=" + delta.y ;
                //$(context).animate( {'marginTop' :to}, 0 ) ;
                if ( startAndroidValue > limit )
                {
                    $('#fullScrollReload').show('slide', {direction: 'up'});
                    setTimeout( function(){ location.reload(); }, 500 ) ;                    
                }
            }
        }
        /*
        // translate 1:1
        if ( reload && $(container).scrollTop() == 0 && delta.y > 0 )
        {
            isAndroidReload = true;
            if ( fullscreen )
            {
                animate( "+=" + delta.y, 0, 0 );
            }
            else
            {
                if( $('#fullScrollReload').offset().top + delta.y < limit * 4 )
                {
                    var to = "+=" + delta.y ;
                    if ( $('#fullScrollReload').offset().top + delta.y >  limit*3 + 10 )  to = limit*3 ;
                    $('#fullScrollReload').animate( { top:to}, 0  );
                }
            }
        }
        */

        // measure start values
        start = {
            // get initial touch coords
            x: touches.pageX,
            y: touches.pageY,
            // store time to determine touch duration
            time: +new Date
        };
    }
    function endHandle ( event )
    {
        /*
        if ( isAndroidReload == true  &&  reload == true )
        {
            if ( fullscreen )
            { 
                if ( $(container).offset().top > limit * 3 )
                {
                    $('#fullScrollReload').show('slide', {direction: 'up'});
                    setTimeout( function(){ location.reload(); }, 500 ) ;
                }
                else
                {
                    animate( 0, 100, 1 );
                }
            }
            else
            {
                if ( $('#fullScrollReload').offset().top> limit * 3 )
                {
                    setTimeout( function(){ location.reload(); }, 500 ) ;
                }
                else
                {
                    $('#fullScrollReload').animate({top:0},200);
                }
            }
        }
        $('#fullScrollReload').hide('slide', {direction: 'up'});
        isAndroidReload = false ;        
        */

        if ( checkAndroidReload && reload ) 
        {
            if ( fullscreen )
            {
                animate( "+=" + delta.y, 0, 0 );
            }
            else
            {
                $(context).animate( {'marginTop' : initialAndroidMargin }, 300 ) ;
            }
            checkAndroidReload = false ;
            startAndroidValue = 0 ;
        }


    }    
    function moveHandleIOS ( event )
    {
        //event.stopPropagation() ;
        //$('#msg').html (  $(container).scrollTop()  ) ;
        
        if ( reload == true && fullscreen && $(context).offset().top > limit ) 
        {
            $('#fullScrollReload').show('slide', {direction: 'up'});
            setTimeout( function(){ location.reload(); }, 500 ) ;
        }
        else if ( reload == true && $(container).scrollTop() < -limit )
        {
            $('#fullScrollReload').show('slide', {direction: 'up'});
            setTimeout( function(){ location.reload(); }, 500 ) ;            
        }
    }
    function scrollHandle()
    {
        if ( request != "" && fullscreen )
        {
            if ( $(context).offset().top <= $('body').outerHeight() - $(context).height() + margin )
            {
                requestContent() ;
            }
        }
        else if ( request != "" )
        {
            if ( $(container).outerHeight() -  $(container).scrollTop() <= $(window).height() + margin )
            {
                requestContent() ;
            }
        } 
    }
    
    function  requestContent()
    {
        if ( isRequest == true ) return ;
        isRequest = true;
                
        $('#fullScrollRequest').show('slide', {direction: 'down'});
        $.ajax({
            type : 'GET' ,
            url : request ,
            dataType : 'html' ,
            error : function(result) { requestContentEnd ('fail') ; } ,
            success : function(result) {
                if ( target != '') $('#' + target).append ( result ) ;
                else $(context).append(result) ;
                requestContentEnd ('success') ;
            }
        });    
    }    
    
    function requestContentEnd(status)
    {
        $('#fullScrollRequest').hide('slide', {direction: 'down'});
        isRequest = false; 
        if ( options.requestCallback ) 
        {
            setTimeout( options.requestCallback(status), 0 )  ;
        }
    }
}

function ImageList(container, options)
{
    "use strict";
    if (!container) return;
    $(container).css( 'position', 'relative' ) ;

    var browser = {
        transitions: (function(temp) {
            var props = ['transitionProperty', 'WebkitTransition', 'MozTransition', 'OTransition', 'msTransition'];
            for ( var i in props ) if (temp.style[ props[i] ] !== undefined) return true;
            return false;
        })(document.createElement('imagelist'))
    };


    var elements = $(container).children();
    var options = options || {};

    var columnWidth = 150 ;
    var minHeight = 15; 

    var isFitWidth = true ;
    var gutterSide = true;
    var blockCount = false;
    var setEndLine = false;
    var setExpand = false ;

    if ( options.columnWidth ) columnWidth = options.columnWidth ;
    if ( options.blockCount ) blockCount = options.blockCount ;
    if ( options.setEndLine ) setEndLine = options.setEndLine ;
    if ( options.setExpand ) setExpand = options.setExpand ;
    if ( typeof(options.isFitWidth) != "undefined") isFitWidth = options.isFitWidth ;
    if ( typeof(options.gutterSide) != "undefined") gutterSide = options.gutterSide ;

    var columnCount ;
    var columnHeight = new Array() ;

    var pos = elements.length ;
    while ( pos -- )
    {
        $(elements).eq(pos).css( 'width', columnWidth ) ;
    }

    var imageCount = 0 ;
    var actualCount = 0 ;

    $(elements).find('img').each(function(){
        imageCount++
    });

    $(elements).find('img').on({
        load: function(event) {
            initList() ;
        }
    });

    function initList ()
    {
        actualCount ++ ;
        if ( imageCount == actualCount )  renderList()  ;
    }

    function renderList ()
    {
        if (blockCount == false )
        {
            columnCount = Math.floor( container.width() / columnWidth ) ;

            if ( columnCount == 0 ) return ;

            var factor1 = columnCount + 1 ;
            if ( gutterSide == false )
            {
                factor1 = columnCount - 1 ;
                if ( factor1 == 0 ) factor1 = 1 ;
            }

            var gutterWidth = (container.width() - ( columnCount * columnWidth)) / (factor1)  ;

            if ( options.gutterWidth )
            {
                gutterWidth = options.gutterWidth  ;

                var factor2 = gutterWidth ;
                if ( gutterSide == false ) factor2 = -gutterWidth - 1 ;

                columnCount = Math.floor( (container.width() - factor2 ) / ( columnWidth + gutterWidth )) ;
                if ( columnCount == 0 ) return ;
            }

            columnHeight = new Array(columnCount) ;
            var pos = columnHeight.length ;
            while ( pos -- ) columnHeight[pos] = 0 ;

            var factor3 = gutterWidth ;
            if ( gutterSide == false ) factor3 = 0 ;

            var factor4 = gutterWidth ;
            if ( gutterSide == false ) factor4 = -gutterWidth ;

            for ( var i = 0; i<elements.length;i++)
            {
                var element = $(elements).eq(i) ;

                var curValue= Math.min.apply(null, columnHeight)  ;
                var curPos ;
                for ( var k=0; k<columnHeight.length;k++ )
                {
                    if ( curValue == columnHeight[k] )
                    {
                        curPos = k ;
                        break;
                    }
                }
                $(element).css( 'position', 'absolute' ) ;

                if ( browser.transitions )
                {
                    $(element).animate ({
                        left: curPos * (columnWidth+gutterWidth) + factor3 ,
                        top: columnHeight[curPos] + factor3
                    }, 50 )  ;
                }
                else
                {
                    $(element).css( 'left', curPos * (columnWidth+gutterWidth) + factor3 ) ;
                    $(element).css( 'top', columnHeight[curPos] + factor3 ) ;
                }


                $(element).addClass($(container).attr('id') + "_columnPos_" + curPos ) ;

                if (setEndLine == true && columnHeight.length ==2 && i == (elements.length - 1) )
                {                        
                    if ( setExpand == true ) 
                    {

                        var compareHeight = new Array() ;
                        compareHeight[0] =  columnHeight[0] ;
                        compareHeight[1] =  columnHeight[1] ;
                        compareHeight[curPos] += $(element).height() + gutterWidth ;

                        var gap = Math.abs ( compareHeight[0] - compareHeight[1] )  ;

                        var targetElement = $( "." + $( container).attr('id') + "_columnPos_0" ).last() ;
                        if ( compareHeight[0] > compareHeight[1] ) 
                        {
                            targetElement = $( "." +$( container).attr('id') + "_columnPos_1" ).last() ;
                        }

                        $(targetElement).height($(targetElement).height()+gap) ;
                    }
                    else
                    {
                        var gap = Math.abs ( columnHeight[0] - columnHeight[1] ) - gutterWidth ;
    
                        if ( gap < minHeight ) 
                        {
                            $(element).hide() ;
                        }
                        else
                        {
                            $(element).height(gap) ;
                        }                        
                    }
                }
                
                columnHeight[curPos] += element.height() + gutterWidth ;
            }

            $(container).css('height', Math.max.apply(null, columnHeight) + factor4 ) ;
        }
        else
        {
            var gutterWidth = 0 ;
            if ( options.gutterWidth )
            {
                gutterWidth = options.gutterWidth  ;
            }

            columnWidth = Math.floor( (container.width() - gutterWidth) / blockCount ) ;
            columnCount = blockCount ;

            if ( columnCount == 0 ) return ;

            var factor1 = columnCount + 1 ;
            if ( gutterSide == false )
            {
                factor1 = columnCount - 1 ;
                if ( factor1 == 0 ) factor1 = 1 ;
            }

            var gutterWidth = (container.width() - ( columnCount * columnWidth)) / (factor1)  ;

            if ( options.gutterWidth )
            {
                gutterWidth = options.gutterWidth  ;

                var factor2 = gutterWidth ;
                if ( gutterSide == false ) factor2 = -gutterWidth - 1 ;

                columnCount = blockCount ;
                if ( columnCount == 0 ) return ;
            }

            columnHeight = new Array(columnCount) ;
            var pos = columnHeight.length ;
            while ( pos -- ) columnHeight[pos] = 0 ;

            var factor3 = gutterWidth ;
            if ( gutterSide == false ) factor3 = 0 ;

            var factor4 = gutterWidth ;
            if ( gutterSide == false ) factor4 = -gutterWidth ;

            var lastElement = new Array();


            for ( var i=0; i<elements.length;i++)
            {
                var element = $(elements).eq(i) ;
                $(element).show() ;
                if (setEndLine == true && setExpand == true ) $(element).height('auto') ;

                var curValue= Math.min.apply(null, columnHeight)  ;
                var curPos ;
                var columnWidthSum = 0 ;
                for ( var k=0; k<columnHeight.length;k++ )
                {
                    if ( curValue == columnHeight[k] )
                    {
                        curPos = k ;
                        break;
                    }
                }

                columnWidth =  (container.width() - (gutterWidth * (blockCount-1))) / blockCount ;

                if ( (curPos < blockCount) && (curValue == columnHeight[curPos]) )
                {
                    $(elements).eq(i).css( 'width', columnWidth ) ;
                }
                if ( (curPos == (blockCount-1)) && (curValue == columnHeight[curPos]) )
                {
                    columnWidthSum = (columnWidth * (blockCount - 1));
                    columnWidth = container.width() - (columnWidthSum + (gutterWidth * (blockCount-1)) ) ;
                    $(elements).eq(i).css( 'width', columnWidth ) ;
                }

                $(element).css( 'position', 'absolute' ) ;

                if ( browser.transitions )
                {
                    $(element).animate ({
                        left: curPos * (columnWidth+gutterWidth) + factor3 ,
                        top: columnHeight[curPos] + factor3
                    }, 50 )  ;
                }
                else
                {
                    $(element).css( 'left', curPos * (columnWidth+gutterWidth) + factor3 ) ;
                    $(element).css( 'top', columnHeight[curPos] + factor3 ) ;
                }

                $(element).removeClass($(container).attr('id') + "_columnPos_0") ;
                $(element).removeClass($(container).attr('id') + "_columnPos_1") ;

                $(element).addClass($(container).attr('id') + "_columnPos_" + curPos ) ;

                if (setEndLine == true && columnHeight.length ==2 && i == (elements.length - 1) )
                {

                    if ( setExpand == true ) 
                    {
                   
                        var compareHeight = new Array() ;
                        compareHeight[0] =  columnHeight[0] ;
                        compareHeight[1] =  columnHeight[1] ;
                        compareHeight[curPos] += $(element).height() + gutterWidth ;

                        var gap = Math.abs ( compareHeight[0] - compareHeight[1] )  ;

                        var targetElement = $( "." + $( container).attr('id') + "_columnPos_0" ).last() ;
                        if ( compareHeight[0] > compareHeight[1] ) 
                        {
                            targetElement = $( "." +$( container).attr('id') + "_columnPos_1" ).last() ;
                        }

                        $(targetElement).height($(targetElement).height()+gap) ;

                    }
                    else
                    {
                        var gap = Math.abs ( columnHeight[0] - columnHeight[1] ) - gutterWidth ;
    
                        if ( gap < minHeight ) 
                        {
                            $(element).hide() ;
                        }
                        else
                        {
                            $(element).height(gap) ;
                        }                        
                    }
                }
                
                columnHeight[curPos] += element.height() + gutterWidth ;
            }
            
            $(container).css('height', Math.max.apply(null, columnHeight) + factor4 ) ;
        }
    }

    if ( isFitWidth == true )
    {
        $( window ).on({
            resize: function(event) {
                renderList ( );
            }
        });
    }

    function checkImage ()
    {
        actualCount = 0 ;
        $(elements).find('img').each(function(){
            if ( this.complete === true) 
           {
               actualCount++ ;
           }
        });

        if ( imageCount != actualCount )  setTimeout (  function(){checkImage();}, 200 ) ;
        else renderList()  ;
    }
    setTimeout (  function(){checkImage();}, 200 ) ;
}

function Slide(container, options)
{
    "use strict";

    //$(container).hide() ;
    $(container).css('overflow-x', 'auto') ;
    $(container).css('overflow-y', 'hidden') ;
    $(container).css('-webkit-overflow-scrolling', 'touch') ;
    $(container).css('position', 'relative') ;

    $(container).children(0).css('overflow', 'hidden') ;
    $(container).children(0).css('position', 'relative') ;

    // quit if no root element
    if (!container) return;
    var element = $(container).children(0);

    var options = options || {};
    var index = parseInt(options.startSlide, 10) || 0;
    var speed = options.speed || 300;
    var delay = options.auto || 0;
    var interval;

    var isTouching = false ;
    var start = {};
    var delta = {};
    var isScrolling;

    var slides ;
    var length ;
    var slidePos ;
        
    function slide(to, speed)
    {
        if ( to < 0 || to >= length ) return ;
        index = to ;

        var target = 0 ;
        for ( var i=0;i<to;i++ )
        {
            target -= slidePos[i] ;
        }
        var effect = 0
        if ( $(element).outerWidth() + target < $(container).width()  )
        {
            target = $(container).width() - $(element).outerWidth() ;
        }

        if ( $(container).width() > $(element).width() )
        {
            $(element).css ( 'left', 0 ) ;
        }
        else
        {
            animate( target , speed, effect);
        }
        
        if ( options.callback ) setTimeout ( options.callback(), 0 ) ;
            
    }
    function getNumSlides()
    {
        return length ;
    }

    function setup()
    {
        // cache slides
        slides = $(element).children();
        length = $(slides).length;

        // create an array to store current positions of each slide
        slidePos = new Array($(slides).length);

        $(element).width( $(slides).length * width ) ;
        // stack elements
        var pos = $(slides).length;
        var width = 0 ;
        while(pos--)
        {
            var slide = $(slides).eq(pos);
            $(slide).css( 'float', 'left' ) ;
            $(slide).css( 'position', 'relative' ) ;
            $(slide).attr('data-index', pos);

            var thiswidth = $(slide).outerWidth() || $(slide).width() ;

            width += thiswidth ;
            slidePos[pos] = thiswidth ;
        }

        $(element).width(width+4);
        $(element).height('100%');
        $(container).show() ;
    }

    function animate(to, speed, end)
    {
        $(container).animate({scrollLeft:-to}, speed) ;
        if ( options.callback ) setTimeout ( options.callback(), 0 ) ;
    }

    setup() ;


    var init = {
        left: $(element).offset().left ,
        right: $(element).css('margin-right').replace( 'px', '' )
    }

        $( element ).on({
            touchstart: function(event) {
                if (options.stopPropagation) event.stopPropagation();                
            },
            touchend: function(event) {
                if (options.stopPropagation) event.stopPropagation();                
            },
            touchmove: function(event) {
                if (options.stopPropagation) event.stopPropagation();                
            }
        });        

    $(window).on({
        resize: function() {
           setup();
        }
    });

    return {
        slide: function(to, speed) {
            slide(to, speed);
        },
        getNumSlides: function() {
            // return total number of slides
            return length;
        },
        getPos: function() {
            // return total number of slides
            return index;
        }
    }
}

function SlideView(container, options)
{
    "use strict";



    $(container).hide() ;
    $(container).css('overflow-x', 'auto') ;
    $(container).css('overflow-y', 'hidden') ;
    $(container).css('-webkit-overflow-scrolling', 'touch') ;
    $(container).css('position', 'relative') ;
    $(container).children(0).css('overflow', 'hidden') ;
    $(container).children(0).css('position', 'relative') ;

    // quit if no root element
    if (!container) return;
    var element = $(container).children(0);

    var options = options || {};
    var index = parseInt(options.startSlide, 10) || 0;
    var speed = options.speed || 100;
    var delay = options.auto || 0;
    var interval;
    var unit;
    var length;

    var start = {};
    var startTmp = {};
    var delta = {};
    var isScrolling;
    var slides ;

    function setup()
    {
        // cache slides
        slides = $(element).children();
        length = $(slides).length;

        // create an array to store current positions of each slide
        var slidePos = new Array($(slides).length);
        unit = $(slides).eq(0).width() ;

        // stack elements
        var pos = $(slides).length;
        var width = 0 ;
        while(pos--)
        {
            var slide = $(slides).eq(pos);
            $(slide).css( 'float', 'left' ) ;
            $(slide).css( 'position', 'relative' ) ;
            $(slide).attr('data-index', pos);
            width += $(slide).width() ;
        }
        $(element).width(width);
        $(element).height('100%');
        $(container).show() ;
    }

    function animate( to, speed )
    {
        $(element).animate ( { left: to}, speed ) ;
    }

    function finalHandle ( pos )
    {
        if ( options.callback ) setTimeout ( options.callback(pos, slides[pos]), 0 ) ;
    }

    function getPosition(pos)
    {
        if ( pos < 0 ) pos = 0 ;
        else if ( pos >= length ) pos = (length-1) ;
        return pos ;
    }

    function slide(to, speed)
    {
        to = getPosition(to) ;

        var target = - to * unit ;
        if ( to == (length-1) ) target =  ( $(container).width() || $(container).outerWidth() ) - $(element).width() ;
        animate ( target, speed ) ;
        index = to ;
        finalHandle ( to ) ;
    }
    function prev()
    {
        slide(index-1, speed)  ;
    }
    function next()
    {
        slide(index+1, speed)  ;
    }
    function getPos()
    {
        return index;
    }
    function getNumSlides()
    {
        return length;
    }


    setup() ;

    $( element ).on({
        touchstart: function(event) {
            if (options.stopPropagation) event.stopPropagation();
            startHandle ( event );
        },
        touchend: function(event) {
            if (options.stopPropagation) event.stopPropagation();
            endHandle ( event );
        },
        touchmove: function(event) {
           if (options.stopPropagation) event.stopPropagation();
           moveHandle ( event );
        }
    });

    function startHandle ( event )
    {
        var touches = event.originalEvent.changedTouches[0] ;

        // measure start values
        start = {
            // get initial touch coords
            x: touches.pageX,
            y: touches.pageY,
            // store time to determine touch duration
            time: +new Date
        };
        startTmp = start ;

        // used for testing first move event
        isScrolling = undefined;

        // reset delta and end measurements
        delta = {};
    }

    function moveHandle ( event )
    {
        var touches = event.originalEvent.changedTouches[0] ;

        // ensure swiping with one touch and not pinching
        if (options.disableScroll) event.preventDefault();

        // measure change in x and y
        delta = {
            x: touches.pageX - startTmp.x,
            y: touches.pageY - startTmp.y,
            move: touches.pageX - start.x,
            time: +new Date - start.time
        }

		// determine if scrolling test has run - one time test
        if ( typeof isScrolling == 'undefined')
        {
            isScrolling = !!( isScrolling || Math.abs(delta.x) < Math.abs(delta.y) );
        }

		// if user is not trying to scroll vertically
        if (!isScrolling)
        {
			// prevent native scrolling
			event.preventDefault();
			animate ( "+=" + delta.x, 0 ) ;

			// measure start values
			startTmp = {
				// get initial touch coords
				x: touches.pageX,
				y: touches.pageY,
				// store time to determine touch duration
				time: +new Date
			}
		}
    }

     function endHandle ( event )
    {
        var touches = event.originalEvent.changedTouches[0] ;

        // measure duration
        var duration = +new Date - start.time;

        // determine if slide attempt triggers next/prev slide
        var isValidSlide =
            Number(duration) < 200               // if slide duration is less than 250ms
            && Math.abs(delta.move) > 20            // and if slide amt is greater than 20px
            || Math.abs(delta.move) > unit/2;      // or if slide amt is greater than half the width
        // determine if slide attempt is past start and end

        // determine direction of swipe (true:right, false:left)
        var direction = delta.x < 0;

		// if not scrolling vertically
        if (!isScrolling)
        {	
			if (isValidSlide )
			{
				if (direction)
				{
					index = getPosition(index+1);
				 }
				else
				{
					index = getPosition(index-1);
				}
			}
			slide(index, speed) ;
		}
    }

    // expose the SlideVIew API
    return {
        slide: function(to, speed) {
            slide(to, speed);
        },
        prev: function() {
            prev();
        },
        next: function() {
            next();
        },
        getPos: function() {
            // return current index position
            return index;
        },
        getNumSlides: function() {
            // return total number of slides
            return length;
        }
    }
}

function Swipe(container, options)
{
    "use strict";

    // quit if no root element
    if ( $(container).length <= 0 ) return ;

    //$(container).hide() ;
    $(container).css('overflow', 'hidden') ;
    $(container).css('position', 'relative') ;
    $(container).children(0).css('overflow', 'hidden') ;
    $(container).children(0).css('position', 'relative') ;

    // check browser capabilities
    var browser = {
        addEventListener: !!window.addEventListener,
        touch: ('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch,
        transitions: (function(temp) {
        var props = ['transitionProperty', 'WebkitTransition', 'MozTransition', 'OTransition', 'msTransition'];
        for ( var i in props ) if (temp.style[ props[i] ] !== undefined) return true;
        return false;
        })(document.createElement('swipe'))
    };

    // quit if no root element
    var element = $(container).children(0);

    var slides, slidePos, width, length;
    options = options || {};
    var index = parseInt(options.startSlide, 10) || 0;
    if( options.cookie && $.cookie( 'swipe' + $(container).attr('id') ) )  index = parseInt( $.cookie( 'swipe' + $(container).attr('id')), 10 ) ;

    var speed = options.speed || 300;
    options.continuous = options.continuous !== undefined ? options.continuous : true;

    var fittable = options.fittable || false ;
   var fittablemargin = options.fittablemargin || 0 ;
   
    var delay = options.auto || 0;
    var interval;

    // cache slides
    slides = $(element).children();
    length = $(slides).length;

    function begin()
    {
        if ( options.auto )
        {
            delay = options.auto || 0;
            interval = setInterval(next, delay);
        }
    }

    function stop()
    {
        delay = 0;
        try {
            clearInterval(interval);
        } catch (e) {}
    }

    function setup()
    {
        // set continuous to false if only one slide
        if ($(slides).length < 2) options.continuous = false;
        //special case if two slides
        else if (browser.transitions && options.continuous && $(slides).length < 3)
        {
            $(element).append( $(slides).eq(0).clone(true) );
            $(element).append( $(element).children().eq(1).clone(true) );
            slides = $(element).children();
            try {
                if ( options.datas[0] ) options.datas[2] = options.datas[0] ;
                if ( options.datas[1] ) options.datas[3] = options.datas[1] ;
            } catch(e) {}
        }

        // create an array to store current positions of each slide
        slidePos = new Array($(slides).length);

        // determine width of each slide
        //if ( options.width ) width = options.width ;
        //else width =  $(container).width() ||  $(container).outerwidth() ;
        width =  $(container).width() ;

        $(element).width( $(slides).length * width ) ;

        // stack elements
        var pos = $(slides).length;
        while(pos--)
        {
            var slide = $(slides).eq(pos);

            $(slide).css( 'float', 'left' ) ;
            $(slide).css( 'position', 'relative' ) ;
            if ( $.trim($(slide).html()) == '' ) $(slide).html('blank') ;

            $(slide).width( width ) ;
            $(slide).attr('data-index', pos);
            if (browser.transitions)
            {
                $(slide).css( 'left', pos * -width ) ;
                move(pos, index > pos ? -width : (index < pos ? width : 0), 0);
            }
        }

        // reposition elements before and after index
        if (options.continuous && browser.transitions)
        {
            move(circle(index-1), -width, 0);
            move(circle(index+1), width, 0);
        }
        if (!browser.transitions)
        {
            $(element).css ( 'left', index * -width ) ;
        }
        $(container).show() ;

        finalHandle(index, 'init') ;

        $( document ).on({keyup:function(event){keyupHandle(event);}}) ;
    }

    var noop = function() {}; // simple no operation function
    var offloadFn = function(fn) { setTimeout(fn || noop, 0) }; // offload a functions execution

    // setup initial vars
    var start = {};
    var delta = {};
    var isScrolling;

    function slide(to, slideSpeed)
    {
        // do nothing if already on requested slide
        if (index == to) return;

        offloadFn(options.prepare && options.prepare(index, slides[index]));

        if (browser.transitions)
        {
            var direction = Math.abs(index-to) / (index-to); // 1: backward, -1: forward

            // get the actual position of the slide
            if (options.continuous)
            {
                var natural_direction = direction;
                direction = -slidePos[circle(to)] / width;

                // if going forward but to < index, use to = slides.length + to
                // if going backward but to > index, use to = -slides.length + to
                if (direction !== natural_direction) to =  -direction * slides.length + to;
            }
            var diff = Math.abs(index-to) - 1;
            // move all the slides between index and to in the right direction
            while (diff--)
            {
                move( circle((to > index ? to : index) - diff - 1), width * direction, 0);
            }
            to = circle(to);
            move(index, width * direction, slideSpeed || speed);
            move(to, 0, slideSpeed || speed);
            if (options.continuous) move(circle(to - direction), -(width * direction), 0); // we need to get the next in place
        }
        else
        {
            to = circle(to);
            animate(index * -width, to * -width, slideSpeed || speed);
        }

        index = to;

        finalHandle(index) ;

        offloadFn(options.callback && options.callback(index, slides[index]));
    }

    function prev()
    {
        if (options.continuous) slide(index-1);
        else if (index) slide(index-1);
    }

    function next()
    {
        if (options.continuous) slide(index+1);
        else if (index < slides.length - 1) slide(index+1);
    }

    function move(index, dist, speed)
    {
        if ( index < 0 ) return ;
        translate(index, dist, speed);
        slidePos[index] = dist;
    }

    function translate(index, dist, speed)
    {
        var slide = $(slides).eq(index);

        $(slide).css('webkitTransitionDuration', speed + 'ms') ;
        $(slide).css('MozTransitionDuration', speed + 'ms') ;
        $(slide).css('msTransitionDuration', speed + 'ms') ;
        $(slide).css('OTransitionDuration', speed + 'ms') ;
        $(slide).css('transitionDuration', speed + 'ms') ;

        $(slide).css('webkitTransform', 'translate(' + dist + 'px,0)' + ' translateZ(0)' ) ;
        $(slide).css('msTransform', 'translateX(' + dist + 'px)' ) ;
        $(slide).css('MozTransform', 'translateX(' + dist + 'px)' ) ;
        $(slide).css('OTransform', 'translateX(' + dist + 'px)' ) ;
    }

    function animate(from, to, speed)
    {
        $(element).animate ( { left:to}, speed||0 ) ;
        options.transitionEnd && options.transitionEnd.call(event, index, slides[index]);
    }

    function circle(index)
    {
        // a simple positive modulo using slides.length
        return ($(slides).length + (index % $(slides).length)) % $(slides).length;
    }

    setup() ;

    if (options.auto) begin();

    $( element ).on({
        touchstart: function(event) {
            if (options.stopPropagation) event.stopPropagation();            
            startHandle ( event );
        },
        touchend: function(event) {
            if (options.stopPropagation) event.stopPropagation();            
            endHandle ( event );
            stop();
            begin();
        },
        touchmove: function(event) {
            if (options.stopPropagation) event.stopPropagation();            
           moveHandle ( event );
        },
        transitionend: function(event) {
            transitionendHandle ( event )  ;
        }
    });

    $(window).on({
        resize: function() {
           setup();
        }
    });


    function keyupHandle ( event )
    {
        if ( event.which == 39 ) next()  ;
        else if ( event.which == 37 ) prev()  ;
    }

    function startHandle ( event )
    {
        offloadFn(options.prepare && options.prepare(index, slides[index]));

        try
        {
            var touches = event.originalEvent.changedTouches[0] ;
        } catch (e) {
            var touches = event ;
            if ( touches.which == 1  &&  touches.button == 0 ){}
            else return;
        }

        // measure start values
        start = {
            // get initial touch coords
            x: touches.pageX,
            y: touches.pageY,
            // store time to determine touch duration
            time: +new Date
        };

        // used for testing first move event
        isScrolling = undefined;

        // reset delta and end measurements
        delta = {};
    }


    function moveHandle ( event )
    {
        try
        {
            var touches = event.originalEvent.changedTouches[0] ;
        } catch (e) {
            var touches = event ;
            if ( touches.which == 1  &&  touches.button == 0 ){}
            else return;
        }

        // ensure swiping with one touch and not pinching
        if ( touches.length > 1 || event.scale && event.scale !== 1) return
        if (options.disableScroll) event.preventDefault();

        // measure change in x and y
        delta = {
            x: touches.pageX - start.x,
            y: touches.pageY - start.y
        }

        // determine if scrolling test has run - one time test
        if ( typeof isScrolling == 'undefined')
        {
            isScrolling = !!( isScrolling || Math.abs(delta.x) < Math.abs(delta.y) );
        }

        // if user is not trying to scroll vertically
        if (!isScrolling)
        {
            // prevent native scrolling
            event.preventDefault();

            // stop slideshow
            stop();

            // increase resistance if first or last slide
            if (options.continuous)
            { // we don't add resistance at the end
                translate(circle(index-1), delta.x + slidePos[circle(index-1)], 0);
                translate(index, delta.x + slidePos[index], 0);
                translate(circle(index+1), delta.x + slidePos[circle(index+1)], 0);
            }
            else
            {
                delta.x =
                    delta.x /
                      ( (!index && delta.x > 0               // if first slide and sliding left
                        || index == slides.length - 1        // or if last slide and sliding right
                        && delta.x < 0                       // and if sliding at all
                      ) ?
                      ( Math.abs(delta.x) / width + 1 )      // determine resistance level
                      : 1 );                                 // no resistance if false

                // translate 1:1
                translate(index-1, delta.x + slidePos[index-1], 0);
                translate(index, delta.x + slidePos[index], 0);
                translate(index+1, delta.x + slidePos[index+1], 0);
            }
        }
    }
    function endHandle ( event )
    {
        try
        {
            var touches = event.originalEvent.changedTouches[0] ;
        } catch (e) {
            var touches = event ;
            if ( touches.which == 1  &&  touches.button == 0 ){}
            else return;
        }

        // measure duration
        var duration = +new Date - start.time;

        // determine if slide attempt triggers next/prev slide
        var isValidSlide =
            Number(duration) < 250               // if slide duration is less than 250ms
            && Math.abs(delta.x) > 20            // and if slide amt is greater than 20px
            || Math.abs(delta.x) > width/2;      // or if slide amt is greater than half the width

        // determine if slide attempt is past start and end
        var isPastBounds =
            !index && delta.x > 0                            // if first slide and slide amt is greater than 0
            || index == slides.length - 1 && delta.x < 0;    // or if last slide and slide amt is less than 0

        if (options.continuous) isPastBounds = false;

        // determine direction of swipe (true:right, false:left)
        var direction = delta.x < 0;

        // if not scrolling vertically
        if (!isScrolling)
        {
            if (isValidSlide && !isPastBounds)
            {
                if (direction)
                {
                    if (options.continuous)
                    { // we need to get the next in this direction in place
                        move(circle(index-1), -width, 0);
                        move(circle(index+2), width, 0);
                    }
                    else
                    {
                        move(index-1, -width, 0);
                    }
                    move(index, slidePos[index]-width, speed);
                    move(circle(index+1), slidePos[circle(index+1)]-width, speed);
                    index = circle(index+1);
                }
                else
                {
                    if (options.continuous)
                    { // we need to get the next in this direction in place
                        move(circle(index+1), width, 0);
                        move(circle(index-2), -width, 0);

                    }
                    else
                    {
                        move(index+1, width, 0);
                    }

                    move(index, slidePos[index]+width, speed);
                    move(circle(index-1), slidePos[circle(index-1)]+width, speed);
                    index = circle(index-1);
                }
                options.callback && options.callback(index, slides[index]);
            }
            else
            {
                if (options.continuous)
                {
                    move(circle(index-1), -width, speed);
                    move(index, 0, speed);
                    move(circle(index+1), width, speed);
                }
                else
                {
                    move(index-1, -width, speed);
                    move(index, 0, speed);
                    move(index+1, width, speed);
                }
            }
            finalHandle(index) ;
        }
    }

    function transitionendHandle (event)
    {
        options.transitionEnd && options.transitionEnd.call(event, index, slides[index]);
    }

    function finalHandle ( position, msg)
    {
        if (options.continuous)
        {
            getHtml(circle(position));
            getHtml(circle(position-1));
            getHtml(circle(position+1));
        }
        else
        {
            getHtml(position);
            getHtml(position-1);
            getHtml(position+1);
        }

        if ( fittable )
        {
            var pannelHeight = $(slides).eq(index).height() ;
            $(container).height(pannelHeight+fittablemargin) ;
        }

        if ( options.cookie ) $.cookie( 'swipe' + $(container).attr('id'), position, { expires: 1} );
    }

    function getHtml ( position )
    {

        if ( position > -1 && position < $(slides).length && $.trim(slides.eq(position).html()) == 'blank' && options.datas[position] )
        {
            //if (browser.transitions) console.log  ( position ) ;
            $(slides).eq(position).html ( "<div style='display:block;width:100%;text-align:center;padding:10px 0;'><img src='https://image.donga.com/donga/img/loading5.gif'></div>") ;
            $.ajax({
                type : 'GET' ,
                url : options.datas[position],
                dataType : 'html' ,
                error : function(result) { alert ( 'error') } ,
                success : function(result) {
                    $(slides).eq(position).html (result) ;

                    if ( fittable )
                    {
                        var pannelHeight = $(slides).eq(index).height() ;
                        $(container).height(pannelHeight+fittablemargin) ;
                    }
                    options.callbackRequest && options.callbackRequest(  index,  position, slides[position]);
                }
            });
        }
    }

    function setHtml ( position, html )
    {
        $(slides).eq(position).html(html) ;
        if ( fittable )
        {
            var pannelHeight = $(slides).eq(index).height() ;
            $(container).height(pannelHeight+fittablemargin) ;
        }

    }

    function appendHtml ( position, html )
    {
        $(slides).eq(position).append(html) ;
        if ( fittable )
        {
            var pannelHeight = $(slides).eq(index).height() ;
            $(container).height(pannelHeight+fittablemargin) ;
        }

    }


    // expose the Swipe API
    return {
        setup: function() {
            setup();
        },
        slide: function(to, speed) {
            // cancel slideshow
            stop();
            slide(to, speed);
            return false;
        },
        prev: function() {
        // cancel slideshow
            stop();
            prev();
            return false;
        },
        next: function() {
            // cancel slideshow
            stop();
            next();
            return false;
        },
        stop: function() {
            // cancel slideshow
            stop();
            return false;
        },
        begin: function() {
            // cancel slideshow
            begin();
            return false;
        },
        getPos: function() {
            // return current index position
            return index;
        },
        getNumSlides: function() {
            // return total number of slides
            return length;
        },
        circle: function(pos) {
            // a simple positive modulo using slides.length
            return circle(pos) ;
        },
        getHtml: function(pos) {
            return slides.eq(pos).html() ;
        },
        setHtml: function(pos, html) {
            setHtml(pos,html) ;
            return false;
        },
        appendHtml: function(pos, html) {
            appendHtml(pos,html) ;
            return false;
        }
    }
}


function Stick(object, options)
{
    "use strict";

    //if ( navigator.userAgent.indexOf("CriOS") != -1 ) return;

    var scroller = $(object).next() ;

    var objectPosition = $(object).css('position');
    var objectTop = parseInt ( $(object).css('top').replace( 'px', '' ), 10 ) ;
    var objectOffset = $(object).offset();
    var objectZindex = $(object).css('z-index') ;
    var scrollerMarginTop = parseInt ( $(scroller).css('margin-top').replace( 'px', '' ), 10 ) ;

    $( window ).on({
        scroll: function(event) {
            if ( $( document ).scrollTop() > objectOffset.top )
            {
                $(object).css('z-index', 999);
                $(object).css( 'position', 'fixed' );
                $(object).css( 'top', 0);
                $(object).css( 'left', 0);

                $(scroller).css( 'margin-top', scrollerMarginTop + $(object).height() );
            }
            else
            {
                $(object).css('z-index', objectZindex);
                $(object).css( 'position', objectPosition);
                $(object).css( 'top', objectTop);
                $( scroller).css( 'margin-top', scrollerMarginTop);
            }
        }
    });
}

function Popup(object, options)
{
    "use strict";

    var options = options || {};

    $(object).hide() ;
    $(object).css('position', 'fixed') ;
    $(object).css('z-index', 9999999) ;

    if ( $('#fullScreenPopupLayer').length <= 0)
    {
        $('body').append( "<div id='fullScreenPopupLayer' style='display:none;position:fixed;top:0;left:0;width:100%;height:100%;background:#262b31;opacity:0.7;alpha(opacity=70) !important;-ms-filter:alpha(opacity=70) !important; -khtml-opacity: 0.7; -moz-opacity: 0.7;z-index:10000;'></div>" ) ;
    }

    var horizontal = 'center' ;
    var vertical = 'center' ;

    var effect = 'clip' ;
    var direction = '' ;
    var duration = 300 ;

    var scroll = false ;
    var contextheight = 0 ;

    if ( options.horizontal ) horizontal = options.horizontal ;
    if ( options.vertical ) vertical = options.vertical ;
    if ( options.effect ) effect = options.effect ;
    if ( options.direction ) direction = options.direction ;
    if ( options.duration ) duration = options.duration ;
    if ( options.scroll ) scroll = options.scroll ;

    function init()
    {
        if ( horizontal == 'left' ) $(object).css('left', 0 ) ;
        else if ( horizontal == 'right' ) $(object).css('right', 0 ) ;
        else if ( horizontal == 'center' ) $(object).css('left', ($(window).width() - $(object).width() ) / 2 ) ;

        if ( vertical == 'top' ) $(object).css('top', 0 ) ;
        else if ( vertical == 'bottom' ) $(object).css('bottom', 0 ) ;
        else if ( vertical == 'center' ) $(object).css('top', ($(window).height() - $(object).height() ) / 2 ) ;
    }

    init() ;

    if ( scroll == true )
    {
        $(object).children(0).css('height', '100%') ;
        $(object).children(0).css('width', '100%') ;
        $(object).children(0).css('overflow', 'hidden') ;
        $(object).children(0).css('overflow-y', 'auto') ;
        $(object).children(0).css('-webkit-overflow-scrolling', 'touch') ;

        $(object).children(0).each ( function(){
            contextheight+=$(this).height() ;
        });

    }

    var bodyOverflow = $("body").css('overflow') ;

    function show()
    {
        init();
        $("body").css('overflow', 'hidden' );
        $(window).bind('touchmove', popupScrollBlockHandler);
        $(window).bind('touchstart', popupScrollBlockStartHandler);

        $('#fullScreenPopupLayer').show() ;
        $(object).show(effect, {direction: direction}, duration) ;
    }

    function hide()
    {
        $('#fullScreenPopupLayer').hide() ;
        $(object).hide(effect, {direction: direction}, duration) ;

        $("body").css('overflow', bodyOverflow );
        $(window).unbind('touchmove', popupScrollBlockHandler);
        $(window).unbind('touchstart', popupScrollBlockStartHandler);
    }

    $('#fullScreenPopupLayer').on({
        click: function() { hide(); }
    });

    var popupScrollBlockStartY = -1 ;
    var popupScrollBlockStartHandler= function(e)
    {
        popupScrollBlockStartY = e.originalEvent.changedTouches[0].pageY ;
    }

    var popupScrollBlockHandler= function(e)
    {
        if ( scroll == false )
        {
            e.preventDefault();
            return ;
        }

        if ($(object).has($(e.target)).length)
        {
            if ($(object).children(0).scrollTop() < 0  ) e.preventDefault();
            else if ( $(object).children(0).scrollTop() == 0  && popupScrollBlockStartY < e.originalEvent.changedTouches[0].pageY ) e.preventDefault();
            else if ( $(object).children(0)[0].scrollHeight - $(object).children(0).scrollTop() <= $(object).children(0).outerHeight() )
            {
                if ( popupScrollBlockStartY > e.originalEvent.changedTouches[0].pageY ) e.preventDefault();
            }
        }
        else
        {
             e.preventDefault();
        }
    }
    return {
        hide: function() { hide(); return false; },
        show: function() { show(); return false; }
    }
}


function ScrollTrigger(object, options)
{
    "use strict";
    var limit = options.limit || 10;

    var from = options.from || -1;
    var to = options.to || -1;

    var fromX = options.fromX || -1;
    var toX = options.toX || -1;


    function scrollHandle()
    {
        if( from != -1 && to != -1 ) 
        {
            var curY =  $(object).offset().top - $(window).scrollTop() ;
           var curX =  $(object).offset().left ;
            if ( curY > from && curY < to )
            {
                if (  fromX != -1 && toX != -1 ) 
                {
                    if ( curX > fromX && curX < toX )
                    {
                        if ( options.callback ) options.callback()  ;
                    }
                }
                else
                {
                    if ( options.callback ) options.callback()  ;
                }
            }
        }
        else
        {
            if ( $(object).offset().top - $(window).scrollTop() < $(window).height() + limit )
            {
                if ( options.callback ) options.callback()  ;
            }
        }

    }
    $(window).on({
        scroll: function() {
            try {
                scrollHandle();
            } catch (e) {} 
        }
    });
    
    return {
        getName: function() { return name; }
    }    
}


function DSwipe(container, options)
{
    "use strict";
    // quit if no root element
    if ( $(container).length <= 0 ) return ;

    $(container).css('overflow', 'hidden') ;
    $(container).css('position', 'relative') ;
    $(container).children(0).css('overflow', 'hidden') ;
    $(container).children(0).css('position', 'relative') ;

    options = options || {};
    var element = $(container).children(0);
    var index = 0;

    var virtualindex = 0;
    if( options.cookie && $.cookie( 'swipe' + $(container).attr('id') ) )  virtualindex = parseInt( $.cookie( 'swipe' + $(container).attr('id')), 10 ) ;
    if( options.virtualindex !== undefined )  virtualindex = options.virtualindex  ;

    var fittable = options.fittable || false ;

    
    var prepos = 0 ;

    var url ;
    var length ;
    var infos = new Array() ;    

    
    if ( options.url ) 
    {
        url = options.url ;
        length = options.length || 0 ;     

        infos[virtualindex] = new Array() ;
        infos[virtualindex]['url'] = options.url ;           
    }
    else
    {
        length = $(container).children(0).children().length ;
        var localCnt = 0 ; 
        $(container).children(0).children().each ( function() {
            if ( $(this).attr('data-url') )
            {            
                infos[localCnt] = new Array() ;
                infos[localCnt]['url'] = $(this).attr('data-url')  ;        
                
                if ( localCnt > 2 ) $(this).remove() ;
                localCnt ++ ; 
            }
            else
            {
                console.log ( 'error#3') ;
                return ;
            }
        }) ;
    }


    var DSwipeUnitObj ;

    setup() ;

    function setup()
    {
        DSwipeUnitObj = Swipe(container,{
            continuous: true,
            fittable: fittable,
            cookie: false,
            callback: function (pos) {
                var direction = pos - prepos ;
                if ( Math.abs(direction) > 1 ) direction = direction / -2 ;
                
                virtualindex = circle ( virtualindex+direction, length ) ;
                index = pos ;
    
                moveHandle(pos, virtualindex, infos[virtualindex], direction ) ;
                moveCallback(pos, virtualindex, infos[virtualindex] ) ;
      
                prepos = pos ;
            }
        });

        getData (0, virtualindex, 1 ) ;

    }
    
    function slide(vpos)
    {
        vpos = parseInt ( vpos ) ;
        if ( typeof ( infos[vpos]) == 'undefined' ) 
        {
            var vposStart = circle ( virtualindex + 2, length ) ;
            setInfoArr ( vposStart, index, vpos ) ;
            return false ;
        }

        virtualindex = vpos ;
        getData (index, virtualindex, 1 ) ;

        moveCallback(index, virtualindex, infos[virtualindex] ) ;
        if ( options.cookie ) $.cookie( 'swipe' + $(container).attr('id'), vpos, { expires: 1} );        

    }
    
    function moveHandle ( pos, vpos, context, direction )
    { 
        getData (circle( pos+direction, 3 ), circle( vpos+direction, length ) ) ;

        if ( options.cookie ) $.cookie( 'swipe' + $(container).attr('id'), vpos, { expires: 1} );
    }

    function setInfoArr ( vposStart, pos, vpos, sucessive )
    {
        $.ajax({
            type : 'GET' ,
            url : infos[vposStart]['url'],
            dataType : 'json' ,
            error : function(result) { console.log ( 'error#1') ; } ,
            success : function(result) {
                infos[vposStart]['html'] = result['DATA'] ;
                if ( typeof( result['CUSTOM'] ) != 'undefined' ) infos[vposStart]['CUSTOM'] = result['CUSTOM'] ;

                var nextVirtualPos = circle ( vposStart + 1, length ) ;

                if ( typeof ( infos[nextVirtualPos] ) == 'undefined' )  infos[nextVirtualPos] = new Array() ;
                if ( result['HEAD']['NEXT'] != "" ) infos[nextVirtualPos]['url'] = result['HEAD']['NEXT'] ;
 
                if ( vposStart == vpos ) 
                {
                    slide ( vpos ) ;
                }
                else 
                {
                    setInfoArr ( circle ( vposStart + 1, length ), pos, vpos, sucessive ) ;
                }
            }
        });
    }
    
    function getData ( pos, vpos, sucessive )
    {
        if ( typeof ( infos[vpos]['html'] ) != 'undefined' ) 
        {
            DSwipeUnitObj.setHtml(pos, infos[vpos]['html']);
            if ( sucessive == 1 )
            {
                getData (circle( pos-1, 3 ), circle( vpos-1, length ) ) ;
                getData (circle( pos+1, 3 ), circle( vpos+1, length ) ) ;
            }
            return ;
        }
            
        DSwipeUnitObj.setHtml(pos, "<div style='display:block;width:100%;text-align:center;padding:10px 0;'><img src='https://image.donga.com/donga/img/loading5.gif'><span></span></div>") ;

        $.ajax({
            type : 'GET' ,
            url : infos[vpos]['url'],
            dataType : 'json' ,
            error : function(result) { console.log ( 'error#2') ; } ,
            success : function(result) {

                DSwipeUnitObj.setHtml(pos, result['DATA']);
                
                infos[vpos]['html'] = result['DATA'] ;
                if ( typeof( result['CUSTOM'] ) != 'undefined' ) infos[vpos]['CUSTOM'] = result['CUSTOM'] ;
                
                var prevVirtualPos = circle( vpos - 1, length)  ;
                var nextVirtualPos = circle ( vpos + 1, length ) ;
                
                if ( typeof ( infos[prevVirtualPos] ) == 'undefined' )  infos[prevVirtualPos] = new Array() ;
                if ( typeof ( result['HEAD'] ) != "undefined" ) 
                    if ( result['HEAD']['PREV'] != "" ) infos[prevVirtualPos]['url'] = result['HEAD']['PREV'] ;
                
                if ( typeof ( infos[nextVirtualPos] ) == 'undefined' )  infos[nextVirtualPos] = new Array() ;
                if ( typeof ( result['HEAD'] ) != "undefined" )
                    if ( result['HEAD']['NEXT'] != "" ) infos[nextVirtualPos]['url'] = result['HEAD']['NEXT'] ;
                if ( sucessive == 1 )
                {
                    if ( typeof ( result['HEAD'] ) != "undefined" )
                    {
                        if ( result['HEAD']['PREV'] != "" ) getData ( circle(pos-1, 3),  prevVirtualPos ) ;
                    }
                    else if ( typeof ( infos[prevVirtualPos]['url'] ) != 'undefined' &&   infos[prevVirtualPos]['url'] != '' ) 
                    {
                        getData ( circle(pos-1, 3),  prevVirtualPos ) ;
                    }

                    if ( typeof ( result['HEAD'] ) != "undefined" )
                    {
                        if ( result['HEAD']['NEXT'] != "" )  getData ( circle(pos+1, 3), nextVirtualPos ) ;
                    }
                    else if ( typeof ( infos[nextVirtualPos]['url'] ) != 'undefined' &&   infos[nextVirtualPos]['url'] != '' ) 
                    {
                        getData ( circle(pos+1, 3), nextVirtualPos ) ;
                    }
                }
                requestCallback(pos, vpos, infos[virtualindex] ) ;
            }
        });
    }
    function circle(pos,base)
    { 
        var res = ( base * 2 + pos ) % base;
        return res;
    }
        
    function moveCallback(pos, vpos, context ) 
    {
        if (options.moveCallback ) options.moveCallback ( pos, vpos, context ) ;
    }
    function requestCallback(pos, vpos, context ) 
    {
        if (options.requestCallback ) options.requestCallback ( pos, vpos, infos[virtualindex] ) ;
    }
    
    // expose the Swipe API
    return {
        setup: function() {
            setup();
            return false;            
        },
        slide: function(to) {
            slide(to);
            return false;
        },        
        prev: function() {
            DSwipeUnitObj.prev();
            return false;
        },
        next: function() {
            DSwipeUnitObj.next();
            return false;
        },
        getIndex: function() {
            // return current index position
            return index;
        },
        getVirtualIndex: function() {
            // return current index position
            return virtualindex;
        }
    }
}


function PSwipe(container, options)
{
    "use strict";

    if ( $(container).length <= 0 ) return ;

    $(container).css('overflow', 'hidden') ;
    $(container).css('position', 'relative') ;
    $(container).children(0).css('overflow', 'hidden') ;
    $(container).children(0).css('position', 'relative') ;

    options = options || {};

    var element = $(container).children(0);
    var slides, slidePos, width, length;
    var index = 0;
    var virtualindex = 0;
    var url = options.url ;
    var fittable = options.fittable || false ;
    
    var speed = 300 ;
    var init = false ;
    var infos = new Array() ;
    infos[virtualindex] = new Array() ;
    infos[virtualindex]['url'] = options.url ;

    // cache slides
    slides = $(element).children();
    length = $(slides).length;

    // setup initial vars
    var start = {};
    var delta = {};
    var isScrolling;
    var blockSwipe = false ;

    function setup()
    {
        slidePos = new Array($(slides).length);
        width =  $(container).width() ;
        $(element).width( $(slides).length * width ) ;

        // stack elements
        var pos = $(slides).length;
        while(pos--)
        {
            var slide = $(slides).eq(pos);

            $(slide).css( 'float', 'left' ) ;
            $(slide).css( 'position', 'relative' ) ;
            if ( $.trim($(slide).html()) == '' ) $(slide).html('blank') ;

            $(slide).width( width ) ;
            $(slide).attr('data-index', pos);

            $(slide).css( 'left', pos * -width ) ;
            move(pos, index > pos ? -width : (index < pos ? width : 0), 0);
        }

        move(circle(index-1), -width, 0);
        move(circle(index+1), width, 0);
        
        if ( !init )
        {
            getData ( index, virtualindex, 1 ) ;
            finalHandle(index, virtualindex, infos[virtualindex]) ;
            init = true ;
        }
    }

    $( element ).on({
        touchstart: function(event) {
            startHandle ( event );
        },
        touchend: function(event) {
            endHandle ( event );
        },
        touchmove: function(event) {
           moveHandle ( event );
        }
    });
    
    $( window ).on({
        resize: function(event) {
            setup ( );
        }
    });

    $( document ).on({
        keyup:function(event){
            keyupHandle(event);
        }
     }) ;

    function keyupHandle ( event )
    {
        if ( event.which == 39 ) next()  ;
        else if ( event.which == 37 ) prev()  ;
    }

    function prev()
    {
        go( -1);
    }

    function next()
    {
        go(1);
    }
    
    function go( direction )
    {
        //if ( ( virtualindex + direction) < 0 ) return ;
        if ( direction == -1 && virtualindex <= 0 && typeof(infos[virtualindex-1]['url']) == 'undefined' ) return ;
        else if ( direction == 1 && infos[virtualindex+1]['url'] == '' ) return ;
         
        if (direction == 1)
        {
            move(circle(index-1), -width, 0);
            move(circle(index+2), width, 0);

            move(index, slidePos[index]-width, speed);
            move(circle(index+1), slidePos[circle(index+1)]-width, speed);
            index = circle(index+1);
            virtualindex ++ ;
        }
        else
        {
            move(circle(index+1), width, 0);
            move(circle(index-2), -width, 0);

            move(index, slidePos[index]+width, speed);
            move(circle(index-1), slidePos[circle(index-1)]+width, speed);
            index = circle(index-1);
            virtualindex -- ;
        }

        getData ( circle(index-1), virtualindex-1 ) ;
        getData ( circle(index+1), virtualindex+1 ) ;        
        
        finalHandle(index, virtualindex, infos[virtualindex]) ;
    }
    
    function translate(index, dist, speed)
    {
        var slide = $(slides).eq(index);

        $(slide).css('webkitTransitionDuration', speed + 'ms') ;
        $(slide).css('MozTransitionDuration', speed + 'ms') ;
        $(slide).css('msTransitionDuration', speed + 'ms') ;
        $(slide).css('OTransitionDuration', speed + 'ms') ;
        $(slide).css('transitionDuration', speed + 'ms') ;

        $(slide).css('webkitTransform', 'translate(' + dist + 'px,0)' + ' translateZ(0)' ) ;
        $(slide).css('msTransform', 'translateX(' + dist + 'px)' ) ;
        $(slide).css('MozTransform', 'translateX(' + dist + 'px)' ) ;
        $(slide).css('OTransform', 'translateX(' + dist + 'px)' ) ;
    }

    function animate(from, to, speed)
    {
        $(element).animate ( { left:to}, speed||0 ) ;
    }

    function move(index, dist, speed)
    {
        if ( index < 0 ) return ;
        translate(index, dist, speed);
        slidePos[index] = dist;
    }

    function circle(index)
    {
        // a simple positive modulo using slides.length
        return ($(slides).length + (index % $(slides).length)) % $(slides).length;
    }

    function getContext(vpos)
    {
        return infos[vpos] ;
    }

    setup() ;


    function startHandle ( event )
    {
        if ( blockSwipe ) return ;
        try
        {
            var touches = event.originalEvent.changedTouches[0] ;
        } catch (e) {
            var touches = event ;
            if ( touches.which == 1  &&  touches.button == 0 ){}
            else return;
        }

        // measure start values
        start = {
            // get initial touch coords
            x: touches.pageX,
            y: touches.pageY,
            // store time to determine touch duration
            time: +new Date
        };

        // used for testing first move event
        isScrolling = undefined;

        // reset delta and end measurements
        delta = {};
    }

    function moveHandle ( event )
    {
        if ( blockSwipe ) return ;        
        try
        {
            var touches = event.originalEvent.changedTouches[0] ;
        } catch (e) {
            var touches = event ;
            if ( touches.which == 1  &&  touches.button == 0 ){}
            else return;
        }

        // ensure swiping with one touch and not pinching
        if ( touches.length > 1 || event.scale && event.scale !== 1) return
        if (options.disableScroll) event.preventDefault();

        // measure change in x and y
        delta = {
            x: touches.pageX - start.x,
            y: touches.pageY - start.y
        }

        // determine if scrolling test has run - one time test
        if ( typeof isScrolling == 'undefined')
        {
            isScrolling = !!( isScrolling || Math.abs(delta.x) < Math.abs(delta.y) );
        }

        // if user is not trying to scroll vertically
        if (!isScrolling)
        {
            // prevent native scrolling
            event.preventDefault();

            // we don't add resistance at the end
            translate(circle(index-1), delta.x + slidePos[circle(index-1)], 0);
            translate(index, delta.x + slidePos[index], 0);
            translate(circle(index+1), delta.x + slidePos[circle(index+1)], 0);
        }
    }
    function endHandle ( event )
    {
        if ( blockSwipe ) return ;        
        try
        {
            var touches = event.originalEvent.changedTouches[0] ;
        } catch (e) {
            var touches = event ;
            if ( touches.which == 1  &&  touches.button == 0 ){}
            else return;
        }

        // measure duration
        var duration = +new Date - start.time;

        // determine if slide attempt triggers next/prev slide
        var isValidSlide =
            Number(duration) < 250               // if slide duration is less than 250ms
            && Math.abs(delta.x) > 20            // and if slide amt is greater than 20px
            || Math.abs(delta.x) > width/2;      // or if slide amt is greater than half the width

        // determine direction of swipe (true:right, false:left)
        var direction = delta.x < 0;

        // determine if slide attempt is past start and end
        var isBounds = false ;
        //if ( direction == false && virtualindex == 0 ) isBounds = true;
        if ( direction == false && virtualindex <= 0 && typeof(infos[virtualindex-1]['url']) == 'undefined' ) isBounds = true;
        else if ( direction == true && infos[virtualindex+1]['url'] == '' ) isBounds = true;

        // if not scrolling vertically
        if (!isScrolling)
        {
            if (isValidSlide && !isBounds)
            {
                if (direction)
                {
                    move(circle(index-1), -width, 0);
                    move(circle(index+2), width, 0);

                    move(index, slidePos[index]-width, speed);
                    move(circle(index+1), slidePos[circle(index+1)]-width, speed);
                    index = circle(index+1);
                    virtualindex ++ ;

                }
                else
                {
                    // we need to get the next in this direction in place
                    move(circle(index+1), width, 0);
                    move(circle(index-2), -width, 0);

                    move(index, slidePos[index]+width, speed);
                    move(circle(index-1), slidePos[circle(index-1)]+width, speed);
                    index = circle(index-1);
                    virtualindex -- ;
                }
                setTimeout ( function(){options.transitionCallback && options.transitionCallback(index, virtualindex, infos[virtualindex]);}, 300) ; 
                if ( fittable )
                {
                    var pannelHeight = $(slides).eq(index).height() ;
                    $(container).height(pannelHeight) ;
                }
            }
            else
            {
                move(circle(index-1), -width, speed);
                move(index, 0, speed);
                move(circle(index+1), width, speed);
            }

            getData ( circle(index-1), virtualindex-1 ) ;
            getData ( circle(index+1), virtualindex+1 ) ;

            finalHandle(index, virtualindex, infos[virtualindex]) ;
        }
    }

    function finalHandle (pos, vpos, context)
    {
        options.moveCallback && options.moveCallback(pos, vpos, context );                        
    }

    function getData ( pos, virtualpos, sucessive )
    {
/*
        if ( virtualpos < 0 ) 
        {
            $(slides).eq(pos).html('');
            return ;
        }
        else if ( typeof(infos[virtualpos]) != 'undefined' &&  infos[virtualpos]['url'] == '' )
        {
            $(slides).eq(circle(pos)).html('');
            return;
        }
*/
        if ( typeof ( infos[virtualpos]['html'] ) != 'undefined' ) 
        {
            $(slides).eq(pos).html(infos[virtualpos]['html']);
            return ;
        }
        $(slides).eq(pos).html ( "<img src='https://image.donga.com/donga/img/loading5.gif'><span></span>") ;

        blockSwipe = true ;
        
        $.ajax({
            type : 'GET' ,
            url : infos[virtualpos]['url'],
            dataType : 'json' ,
            error : function(result) { blockSwipe = false; console.log ( 'error') ; } ,
            success : function(result) {
                $(slides).eq(pos).html(result['DATA']);
                
                infos[virtualpos]['html'] = result['DATA'] ;
                if ( typeof( result['CUSTOM'] ) != 'undefined' ) infos[virtualpos]['CUSTOM'] = result['CUSTOM'] ;
                
                var prevVirtualPos = virtualpos - 1 ;
                var nextVirtualPos = virtualpos + 1 ;
                
                if ( typeof ( infos[prevVirtualPos] ) == 'undefined' )  infos[prevVirtualPos] = new Array() ;
                if ( result['HEAD']['PREV'] != "" ) infos[prevVirtualPos]['url'] = result['HEAD']['PREV'] ;
                
                if ( typeof ( infos[nextVirtualPos] ) == 'undefined' )  infos[nextVirtualPos] = new Array() ;
                infos[nextVirtualPos]['url'] = result['HEAD']['NEXT'] ;
                
                if ( sucessive == 1 )
                {
                    if (  result['HEAD']['PREV'] != "" ) getData ( circle(pos-1),  prevVirtualPos ) ;
                    else $(slides).eq(circle(pos-1)).html ('') ;
                        
                    if ( result['HEAD']['NEXT'] != "" )  getData ( circle(pos+1), nextVirtualPos ) ;
                    else  $(slides).eq(circle(pos+1)).html ('') ;

                    setTimeout ( function(){options.transitionCallback && options.transitionCallback(index, virtualindex, infos[virtualindex]);}, 0 ) ; 
                    if ( fittable )
                    {
                        var pannelHeight = $(slides).eq(index).height() ;
                        $(container).height(pannelHeight) ;
                    }
                }
                options.requestCallback && options.requestCallback( pos, virtualpos, result );                
                
                blockSwipe = false;
            }
        });
    } 
    
    // expose the Swipe API
    return {
        setup: function() {
            setup();
            return false;
        },
        prev: function() {
            prev();
            return false;
        },
        next: function() {
            next() ;
            return false;
        },        
        getContext: function(vpos) {
            return getContext(vpos) ;
        },
        getIndex: function() {
            // return current index position
            return index;
        },
        getVirtualIndex: function() {
            // return current index position
            return virtualindex;
        }
    }
}




(function($){
    $.fn.imgLoad = function(callback) {
        return this.each(function() {
            if (callback) 
            {
                if (this.complete || /*for IE 10-*/ $(this).height() > 0) 
                {
                    callback.apply(this);
                }
                else 
                {
                    $(this).on('load', function(){
                        callback.apply(this);
                    });
                }
            }
        });
    };
})(jQuery);


function alignImageList (e) {

    "use strict"; 

    var eachHeight = new Array() ; 
    var setInfo = new Array() ;
    
    var allComplete = false;

    var thisObj = $( e ) ; 

    var imageSet = thisObj.children().eq(0) ; 
    var imageList = thisObj.children().eq(1) ; 
    
    var totalImageCnt = imageSet.find('img').length; 
    var currentImageCnt = 0; 

    imageSet.css ( 'position', 'absolute' ) ; 
    imageSet.css ( 'left', '-2000px' ) ; 
    
    $(document).ready( function() {
        imageList.children().css('width', 100/imageList.children().length + "%" ) ; 
        imageList.children().each( function(index) {
            eachHeight[index] = 0 ;
        }) ;
        
        imageSet.find('img').imgLoad(function(){
            currentImageCnt ++ ;
            if ( totalImageCnt == currentImageCnt ) allComplete = true ;
        });
        
        arrangeImage () ;
    }) ;


    function arrangeImage ()
    {
        if ( allComplete || totalImageCnt == 0 )  
        {
            imageSet.children().each( function(index) {
                var pos = getMinColumn() ;
                eachHeight [pos] += $(this).outerHeight(true) ;
                imageList.children().eq(pos).append( "<div style='display:none;'>" + $(this).html() + "</div>" ).find('div').fadeIn('slow');
                $(this).remove() ;
            }) ;
        }
        else
        {
            setTimeout( function(){ arrangeImage()},300 ) ;
        }
    }

    function getMinColumn ( obj ) 
    {
        var min = eachHeight[0] ;
        var index = 0 ;
        
        for(var i=1;i<eachHeight.length;i++)
        {
            if ( eachHeight[i] < min )  
            {
                min = eachHeight[i] ;
                index = i ;
            }
        }
        return index ;
    }
    
    function appendImageSet( htmlStr ) 
    {
        imageSet.html(htmlStr) ;
        allComplete = false;
        totalImageCnt = imageSet.find('img').length; 
        currentImageCnt = 0; 
        
        imageSet.find('img').imgLoad(function(){
            currentImageCnt ++ ;
            if ( totalImageCnt == currentImageCnt ) allComplete = true ;
        });        
        arrangeImage () ;
    }
    
    return {
        appendImageSet: function(htmlStr) {
            appendImageSet( htmlStr ) ;
        }
    }
}

var	top_last_scroll		= 0;
var	diff_scroll			= 0;

function	onScrollDirection(){
	var	function_direction	= function(){
	var	top_scroll	= $(document).scrollTop();
	window.diff_scroll		= top_scroll - window.top_last_scroll;
	window.top_last_scroll	= top_scroll;
		
		$(window).trigger("onScrollAdjustEndLine");
	};
	
	$(window).scroll(function_direction);
	$(window).resize(function_direction);
	
	setTimeout(function(){window.diff_scroll=-1;$(window).trigger("onScrollAdjustEndLine");}, 200);
};

function	onScrollAdjustEndLine(query_start, query_end, query_in){
	$(window).on("onScrollAdjustEndLine",function(){
			var	obj_start	= $(query_start);
			var	obj_end	= $(query_end);
			var	obj_in		= $(query_in);
			
			if ( obj_start && obj_end && obj_in ){
				var	top_in		= obj_in.offset().top;
				var	top_win		= $(document).scrollTop();
				var	top_start		= obj_start.offset().top;
				var	top_end		= obj_end.offset().top;
				var	left_start		= obj_start.offset().left;
				var	width_start	= obj_start.width();
				var	height_win	= $(window).height();
				var	height_end	= obj_end.height();
				var	height_in		= obj_in.height();
				var	bot_win		= top_win + height_win;
				var	bot_end		= top_end + height_end;
				var	bot_in		= top_in + height_in;
				var	gap_max		= top_end + height_end - top_start - height_in;
				
				obj_start.css({"height":height_in+"px"});
				
				if ( window.diff_scroll == 0 ){
					if ( obj_in.css("position") == "fixed" ){
						obj_in.css({"left":left_start+"px"});
					}
				}
				if ( height_in >= bot_end - top_start ){
					obj_in.css({"position":"relative","top":"0px","left":"0px","width":""});
				}
				else if ( height_win > top_end + height_end - top_start ){
					obj_in.css({"position":"relative","top":"0px","left":"0px","width":""});
				}					
				else if ( height_win > height_in ){
					if ( top_start >= top_win ){
						obj_in.css({"position":"relative","top":"0px","left":"0px","width":""});
					}
					else if ( top_start + gap_max <= top_win ){
						obj_in.css({"position":"relative","top":gap_max+"px","left":"0px","width":""});
					}						
					else{
						obj_in.css({"position":"fixed","top":"0px","left":left_start+"px","width":width_start+"px"});
					}
				}
				else{
					if ( window.diff_scroll < 0 )	{
						if ( top_start >= top_win ){
							obj_in.css({"position":"relative","top":"0px","left":"0px","width":""});
						}
						else if ( top_in >= top_win ){
							obj_in.css({"position":"fixed","top":"0px","left":left_start+"px","width":width_start+"px"});
						}
						else if ( obj_in.css("position") == "fixed" ){
							obj_in.css({"position":"relative","top":(top_in-top_start-diff_scroll)+"px","left":"0px","width":""});
						}
					}
					if ( window.diff_scroll > 0 )	{
						if ( bot_end <= bot_win ){
							obj_in.css({"position":"relative","top":gap_max+"px","left":"0px","width":""});
						}
						else if ( bot_in <= bot_win ){
							obj_in.css({"position":"fixed","top":(height_win-height_in)+"px","left":left_start+"px","width":width_start+"px"});
						}
						else if ( obj_in.css("position") == "fixed" ){
							obj_in.css({"position":"relative","top":(top_in-top_start-diff_scroll)+"px","left":"0px","width":""});
						}
					}
				}
			}
		}
	);
};